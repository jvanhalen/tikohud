#!/usr/bin/env node

// Create websocket server for IRC
var io = require('socket.io').listen(8181);
var net = require('net');
var moment = require('moment');
var message = require('irc-message');

var index = 0;
var user = [{taken: false,
            name: 'jaakko',
            nickname: 'HUDA',
            realname: 'Jaakko Vee'},
            {taken: false,
            name: 'jaakko',
            nickname: 'HUDB',
            realname: 'Jaakko Vee'},
            {taken: false,
            name: 'jaakko',
            nickname: 'HUDC',
            realname: 'Jaakko Vee'}]

var seqno = 0;

var tows = '';

// Create Websocket
io.sockets.on('connection', function (websocket) {

    websocket.tcpsocket = "";

    if(!websocket.notified) {
        var msg = { seqno: seqno++,
                    timestamp: moment().format('hh:mm:ss'),
                    text: "Websocket connected, type 'connect' to connect IRC server"
        }
        // Send CONNECTED message to client
        websocket.send(JSON.stringify(msg));
        websocket.notified = true;
    }

    // Handle incoming messages CLIENT -> SERVER
    websocket.on('message', function (data) {
        console.log("ws received", data);
        if (data === "connect") {
            console.log("ws received CONNECT, starting IRC");
            websocket.tcpsocket = new irc(user[index%3], websocket);
            index++;
        }
        else {

            if(websocket.tcpsocket) {
                websocket.tcpsocket.send(data);
            }

            /*
            // Echo timestamped command back to client
            var msg = { seqno: seqno++,
                        timestamp: moment().format('hh:mm:ss'),
                        text: data
            }

            this.send(JSON.stringify(msg)); */

        }
    });
    websocket.on('disconnect', function () {
        console.log("IRC client disconnected");
        // Should the telnet be left open if the websocket disconnects?
        // Maybe... Later...
        websocket.tcpsocket = {};
    });
});

// Create TCP socket

// Create IRC object per
var irc = function(user, websocket) {

    console.log("created new IRC proxy");

    var self = this;

    self.websocket = websocket;
    self.user = user;
    self.connected = false;
    self.socket = new net.Socket();
    self.socket.connected = false;
    self.socket.setNoDelay(true);
    self.socket.setEncoding('utf8');

    // Add listeners
    self.socket.on('data', receive);
    self.socket.on('close', disconnect);
    self.socket.on('connect', function() {
        self.connected = true;
        console.log("Connected to IRC");
    });

    self.connect = function() {
        console.log("irc.connect", self.user);

        // Connect to IRC SERVER
        self.socket.connect(6667, 'irc.quakenet.org', function () {
            self.send('USER ' + self.user.name + ' localhost * ' + self.user.realname);
            self.send('NICK ' + self.user.nickname);
        });
    }

    self.send = function(data) {
        console.log("irc.send", data);

        data = sanitize(data);

        if (true == self.connected) {
            if (!data || data.length == 0) {
                console.error("ERROR tried to send no data");
            } 
            else if (data.length > 510) {
                console.error("ERROR tried to send data > 510 chars in length: " + data);
            } 
            else {
                if(self.socket)
                self.socket.write(data + '\r\n', 'utf8', function () {
                    console.log("-> " + data);
                });
            }
        }
        else {
            console.log("TCP socket not connected");
        }
    }

    function disconnect() {
        console.log("irc.disconnect");
        self.connected = false;
    }

    function receive(data) {
        console.log("irc.receive", data);
        var arr = data.split("\r\n");

        for(var line in arr) { 
            if(arr[line] !== "") {
                var msg = { seqno: seqno++,
                            timestamp: moment().format('hh:mm:ss'),
                            text: arr[line]
                }

                // Send IRC message to client
                self.websocket.send(JSON.stringify(msg));
            }
        }

    }

    function sanitize(data) {
        if (!data) {
            return data;
        }

        /* Note:
         * 0x00 (null character) is invalid
         * 0x01 signals a CTCP message, which we shouldn't ever need to do
         * 0x02 is bold in mIRC (and thus other GUI clients)
         * 0x03 precedes a color code in mIRC (and thus other GUI clients)
         * 0x04 thru 0x19 are invalid control codes, except for:
         * 0x16 is "reverse" (swaps fg and bg colors) in mIRC
         */
        return data.replace(/\n/g, "\\n").replace(/\r/g, "\\r")
            .replace(/[^\x02-\x03|\x16|\x20-\x7e]/g, "");
    }

    self.connect();
}
